정규 표현식 : regular expression

1. 특정 문자의 매칭 (존재) 결과를 판단하기 위한 식이다.
2. 정규식 생성 방법
	var regExp = /정규식/;
	
3. 메타문자
	1) /a/			a를 의미
	2) /a|b/		a 또는 b
	3) /.a/			a로 끝나는 두 글자
	4) /a./			a로 시작하는 두 글자
	5) /^a/			a로 시작
	6) /a$/			a로 끝남
	7) /a*/			a를 0번 이상 반복
	8) /a+/			a를 1번 이상 반복
	9) /(ab)/		a와 b를 그룹핑
	10) /a{2}/		a를 2번 반복
	11) /a{2,}/		a를 2번 이상 반복
	12) /a{2,3}/ 	a를 2번 이상 3번 이하 반복
	
4. 플래그(flag)
	- 정규식 뒤에 덧붙이는 옵션
	- 둘 이상의 플래그를 함께 사용할 수 있다.
	1) g : 문자열 전체에서 모든 패턴을 찾는다.
	2) i : 대소문자의 구분 없이 패턴을 찾는다.
	3) m : 줄이 바뀌어도 계속 패턴을 찾는다.
	- 예시
	/a/g
	/a/i
	/a/m
	/a/gi
	...
	
5. 문자클래스
	1) /[ab]/		a, b 중 하나	
	2) /[^ab]/		a, b 를 제외하고 나머지 중 하나
	3) /^[ab]/		a, b 중 하나로 시작
	4) /[ab]$/		a, b 중 하나로 끝남
	5) /[a-z]/		a ~ z 중 하나 (소문자)
	6) /[A-Z]/		A ~ Z 중 하나 (대문자)
	7) /[0-9]/  	0 ~ 9 중 하나 (숫자)
	8) /[가-힣]/		가 ~ 힣 중 하나 (한글)
	9) /[a-zA-Z]/	a ~ Z 중 하나 (소문자+대문자)
    10)/[a-z][A-Z]/	소문자 하나 + 대문자 하나
    11)/\s/			공백 문자 (space) 
    12)/\S/			공백 문자가 아니다(not space)
    13)/\d/			숫자(digit)
    14)/\D/			숫자가 아니다(not digit)
    15)/\w/			대문자, 소문자, 밑줄(_) (word)
    16)/\W/			대문자, 소문자, 밑줄 아니다. (not word)
    
테스트

1. a를 최소 1번 이상 포함하고 있는가?
	: /a+/
2. 영문을 최소 0번 이상 포함하고 있는가?
	: /[a-zA-z]*/ 또는 [a-z]*/i
3. 소문자나 숫자인가?
	: /[a-z]|[0-9]/ 또는 /[a-z]|\d/
4. a가 연속 3번 나타나는가?
	: /a{3}/
5. 대문자가 아닌가?
	: /[^A-Z]/
	

주요 정규식

1. 아이디 검사
	1) 첫 글자는 소문자이다.
	2) 5 ~ 20 사이의 소문자나 숫자를 사용한다.
	var regExpID = /^[a-z][a-z0-9]{4,19}$/; 	// [a-z]가 한 글자를 차지함

2. 휴대폰 검사
	var regExpPhone = //^01[0|1|6|9]-[0-9]{3,4}-[0-9]{4}$/;
	
3. 이메일
	var regExpEmail = /^[a-z][a-z0-9\-\_]+@[a-zA-Z0-9]{3,}(\.[a-zA-Z]{2,6}){1,2}$/			// 아이디에는 _ , - 허용, \_, \- 로 표현





















 
    
    
    